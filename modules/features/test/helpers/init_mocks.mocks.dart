// Mocks generated by Mockito 5.4.4 from annotations
// in features/test/helpers/init_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:core/core.dart' as _i2;
import 'package:dartz/dartz.dart' as _i3;
import 'package:features/data/data_source/local/local_weather_data_source_impl.dart'
    as _i8;
import 'package:features/data/data_source/remote/remote_weather_data_source_impl.dart'
    as _i5;
import 'package:features/data/models/weather_response.dart' as _i7;
import 'package:features/data/repository/weather_repository_impl.dart' as _i9;
import 'package:features/domain/entity/weather_entity.dart' as _i10;
import 'package:features/domain/repository/weather_repository.dart' as _i4;
import 'package:features/domain/use_cases/check_location_permission_use_case.dart'
    as _i12;
import 'package:features/domain/use_cases/fetch_weather_use_case.dart' as _i11;
import 'package:features/domain/use_cases/get_current_location_city_name_use_case.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkResponse_0<T> extends _i1.SmartFake
    implements _i2.NetworkResponse<T> {
  _FakeNetworkResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCacheManager_1 extends _i1.SmartFake implements _i2.CacheManager {
  _FakeCacheManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherRepository_3 extends _i1.SmartFake
    implements _i4.WeatherRepository {
  _FakeWeatherRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteWeatherDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteWeatherDataSourceImpl extends _i1.Mock
    implements _i5.RemoteWeatherDataSourceImpl {
  MockRemoteWeatherDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.NetworkResponse<_i7.WeatherResponse>> fetchWeather(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [],
          {#cityName: cityName},
        ),
        returnValue: _i6.Future<_i2.NetworkResponse<_i7.WeatherResponse>>.value(
            _FakeNetworkResponse_0<_i7.WeatherResponse>(
          this,
          Invocation.method(
            #fetchWeather,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i6.Future<_i2.NetworkResponse<_i7.WeatherResponse>>);

  @override
  _i6.Future<Map<String, String>> loadEnvFile() => (super.noSuchMethod(
        Invocation.method(
          #loadEnvFile,
          [],
        ),
        returnValue: _i6.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i6.Future<Map<String, String>>);
}

/// A class which mocks [LocalWeatherDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalWeatherDataSourceImpl extends _i1.Mock
    implements _i8.LocalWeatherDataSourceImpl {
  MockLocalWeatherDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheManager get cacheManager => (super.noSuchMethod(
        Invocation.getter(#cacheManager),
        returnValue: _FakeCacheManager_1(
          this,
          Invocation.getter(#cacheManager),
        ),
      ) as _i2.CacheManager);

  @override
  _i6.Future<_i3.Either<_i2.Failure, _i7.WeatherResponse>> fetchWeather(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i6.Future<_i3.Either<_i2.Failure, _i7.WeatherResponse>>.value(
                _FakeEither_2<_i2.Failure, _i7.WeatherResponse>(
          this,
          Invocation.method(
            #fetchWeather,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i2.Failure, _i7.WeatherResponse>>);

  @override
  _i6.Future<void> saveWeather({
    required String? cityName,
    required _i7.WeatherResponse? weatherResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWeather,
          [],
          {
            #cityName: cityName,
            #weatherResponse: weatherResponse,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [WeatherRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryImpl extends _i1.Mock
    implements _i9.WeatherRepositoryImpl {
  MockWeatherRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>> fetchWeather(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_2<_i2.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #fetchWeather,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [FetchWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchWeatherUseCase extends _i1.Mock
    implements _i11.FetchWeatherUseCase {
  MockFetchWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.WeatherRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeatherRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.WeatherRepository);

  @override
  _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>> execute(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_2<_i2.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i2.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [CheckLocationPermissionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckLocationPermissionUseCase extends _i1.Mock
    implements _i12.CheckLocationPermissionUseCase {
  MockCheckLocationPermissionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [GetCurrentLocationCityNameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentLocationCityNameUseCase extends _i1.Mock
    implements _i13.GetCurrentLocationCityNameUseCase {
  MockGetCurrentLocationCityNameUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i6.Future<String>);
}

/// A class which mocks [CheckNetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckNetworkService extends _i1.Mock
    implements _i2.CheckNetworkService {
  MockCheckNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> checkNetworkService() => (super.noSuchMethod(
        Invocation.method(
          #checkNetworkService,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
